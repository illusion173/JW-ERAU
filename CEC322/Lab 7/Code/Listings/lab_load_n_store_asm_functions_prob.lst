


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             my_fancy_asm_code, CODE, READON
LY 
                                                            ; Define the progra
                                                            m area
    2 00000000         
    3 00000000         ; Export functions defined in this file. These functions
                        need to be declared 
    4 00000000         ; in the file calling them.
    5 00000000                 EXPORT           task10
    6 00000000                 EXPORT           task11
    7 00000000                 EXPORT           task12
    8 00000000                 EXPORT           task13
    9 00000000                 EXPORT           task14
   10 00000000                 EXPORT           task15
   11 00000000         
   12 00000000                 IMPORT           gPtrArray10a
   13 00000000                 IMPORT           gPtrArray11a
   14 00000000                 IMPORT           gPtrArray12a
   15 00000000                 IMPORT           gPtrArray13a
   16 00000000                 IMPORT           gPtrArray14a
   17 00000000                 IMPORT           gPtrArray15a
   18 00000000                 IMPORT           gVar1
   19 00000000         
   20 00000000                 ALIGN                        ; Align the data in
                                                             the boundary of 4 
                                                            bytes. 
   21 00000000         
   22 00000000         
   23 00000000         task10  PROC
   24 00000000         ; r0 = gPtrArray10a
   25 00000000         ; r1 = gVar1
   26 00000000 F04F 0200       MOV              r2, #0      ; variable (int) i
   27 00000004         task10_loop
   28 00000004 428A            CMP              r2, r1      ; test = r2 - r1
   29 00000006 DA07            BGE              task10_end  ; if test >= 0, the
                                                            n branch to task10_
                                                            end    
   30 00000008 EA4F 0382       MOV              r3, r2, LSL #2 ; r3 <- r2 * 4
   31 0000000C F1A3 030F       SUB              r3, #15     ; r3 <- r3 - 15
   32 00000010 5483            STRB             r3, [r0, r2] ; r3 -> mem[r0 + r
                                                            2] or r3 -> mem[r0 
                                                            + i]
   33 00000012 F102 0201       ADD              r2, #1      ; r2 <- r2 + 1
   34 00000016 E7F5            B                task10_loop ; branch to task10_
                                                            loop
   35 00000018         task10_end
   36 00000018 4770            BX               lr          ; return
   37 0000001A                 ENDP
   38 0000001A         
   39 0000001A         ; If you need to use registers starting from r4, you nee
                       d to PUSH them first to save the 
   40 0000001A         ; run-time environment for the caller. You need to POP t
                       hem up at the exit of the code.
   41 0000001A         
   42 0000001A         task11  PROC
   43 0000001A F04F 0200       MOV              r2, #0
   44 0000001E         task11_loop
   45 0000001E 428A            CMP              r2, r1      ; test = r2 - r1
   46 00000020 DA07            BGE              task11_end  ; if test >= 0, the



ARM Macro Assembler    Page 2 


                                                            n branch to task11_
                                                            end    
   47 00000022 EA4F 1342       MOV              r3, r2, LSL #5 ; r3 <- r2 * 32
   48 00000026 F103 0302       ADD              r3, #2      ; r3 <- r3 + 2
   49 0000002A 5483            STRB             r3, [r0, r2] ; r3 -> mem[r0 + r
                                                            2] or r3 -> mem[r0 
                                                            + i]
   50 0000002C F102 0201       ADD              r2, #1      ; r2 <- r2 + 1
   51 00000030 E7F5            B                task11_loop ; branch to task11_
                                                            loop
   52 00000032         task11_end
   53 00000032 4770            BX               lr
   54 00000034                 ENDP
   55 00000034         
   56 00000034         task12  PROC
   57 00000034 B530            PUSH             {r4-r5, lr}
   58 00000036         ; r0 = gPtrArray10a
   59 00000036         ; r1 = gPtrArray12a
   60 00000036         ; r2 = gVar1
   61 00000036 F04F 0300       MOV              r3, #0
   62 0000003A         task12_loop
   63 0000003A 4293            CMP              r3, r2
   64 0000003C DA0C            BGE              task12_end
   65 0000003E 56C4            LDRSB            r4, [r0, r3]
   66 00000040 F04F 050A       LDR              r5, =10
   67 00000044 EBA5 0504       SUB              r5, r4
   68 00000048 F821 5013       STRH             r5, [r1, r3, LSL #1]
   69 0000004C F104 0401       ADD              r4, #1
   70 00000050 54C4            STRB             r4, [r0, r3]
   71 00000052 F103 0301       ADD              r3, #1
   72 00000056 E7F0            B                task12_loop
   73 00000058         task12_end
   74 00000058 BD30            POP              {r4-r5, pc} ; this line is equi
                                                            valent to:
   75 0000005A         ; POP  {r4-r5, lr}
   76 0000005A         ; BX   lx
   77 0000005A                 ENDP
   78 0000005A         
   79 0000005A         task13  PROC
   80 0000005A B530            PUSH             {r4-r5, lr}
   81 0000005C         ; r0 = gPtrArray11a
   82 0000005C         ; r1 = gPtrArray13a
   83 0000005C         ; r2 = gVar1
   84 0000005C F1A2 0201       SUB              r2, #1
   85 00000060 F04F 0300       MOV              r3, #0
   86 00000064         task13_loop
   87 00000064 4293            CMP              r3, r2
   88 00000066 DA09            BGE              task13_end
   89 00000068         
   90 00000068 7804            LDRB             r4, [r0]
   91 0000006A 7845            LDRB             r5, [r0, #1]
   92 0000006C 442C            ADD              r4, r5
   93 0000006E         
   94 0000006E F821 4013       STRH             r4, [r1, r3, LSL #1]
   95 00000072 F103 0301       ADD              r3, #1
   96 00000076 F100 0001       ADD              r0, #1
   97 0000007A         
   98 0000007A E7F3            B                task13_loop
   99 0000007C         task13_end



ARM Macro Assembler    Page 3 


  100 0000007C BD30            POP              {r4-r5, pc}
  101 0000007E                 ENDP
  102 0000007E         
  103 0000007E         
  104 0000007E         task14  PROC
  105 0000007E B530            PUSH             {r4-r5, lr}
  106 00000080         ; r0 = gPtrArray12a
  107 00000080         ; r1 = gPtrArray14a
  108 00000080         ; r2 = gVar1
  109 00000080 F1A2 0201       SUB              r2, #1
  110 00000084 F04F 0300       MOV              r3, #0
  111 00000088         task14_loop
  112 00000088 4293            CMP              r3, r2
  113 0000008A DA0A            BGE              task14_end
  114 0000008C F9B0 4000       LDRSH            r4, [r0]
  115 00000090 F930 5F02       LDRSH            r5, [r0, #2]!
  116 00000094 EB04 04C5       ADD              r4, r5, LSL #3
  117 00000098 F841 4023       STR              r4, [r1, r3, LSL #2]
  118 0000009C F103 0301       ADD              r3, #1
  119 000000A0 E7F2            B                task14_loop
  120 000000A2         task14_end
  121 000000A2 BD30            POP              {r4-r5, pc}
  122 000000A4                 ENDP
  123 000000A4         
  124 000000A4         task15  PROC
  125 000000A4 B530            PUSH             {r4-r5, lr}
  126 000000A6         ; r0 = gPtrArray13a
  127 000000A6         ; r1 = gPtrArray15a
  128 000000A6         ; r2 = gVar1
  129 000000A6 F1A2 0201       SUB              r2, #1
  130 000000AA F04F 0300       MOV              r3, #0      ; i = 0
  131 000000AE         
  132 000000AE         task15_loop
  133 000000AE 4293            CMP              r3, r2
  134 000000B0 DA09            BGE              task15_end
  135 000000B2         
  136 000000B2 F830 4B02       LDRH             r4, [r0], #2 ; load gPtr13a to 
                                                            temp
  137 000000B6 8805            LDRH             r5, [r0]    ; load gPtr11a + 1
  138 000000B8 EB04 1505       ADD              r5, r4, r5, LSL # 4 ; = temp + 
                                                            16 * (*gPtr13a)
  139 000000BC         
  140 000000BC F821 5023       STRH             r5, [r1, r3, LSL #2]
  141 000000C0         
  142 000000C0 F103 0301       ADD              r3, #1      ; increment i
  143 000000C4 E7F3            B                task15_loop
  144 000000C6         task15_end
  145 000000C6         
  146 000000C6 BD30            POP              {r4-r5, pc}
  147 000000C8                 ENDP
  148 000000C8         
  149 000000C8                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --depen
d=c:\pjct_arm\build\simulator\lab_load_n_store_asm_functions_prob.d -oc:\pjct_a
rm\build\simulator\lab_load_n_store_asm_functions_prob.o -I.\RTE\_prob -IC:\Use
rs\illus\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\
illus\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\Device\ARM\ARMCM4\Include --prede
fine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 535" --predefine="_RTE
_ SETA 1" --predefine="ARMCM4_FP SETA 1" --predefine="_RTE_ SETA 1" --list=.\li



ARM Macro Assembler    Page 4 


stings\lab_load_n_store_asm_functions_prob.lst source\lab_load_n_store_asm_func
tions_prob.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

my_fancy_asm_code 00000000

Symbol: my_fancy_asm_code
   Definitions
      At line 1 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      None
Comment: my_fancy_asm_code unused
task10 00000000

Symbol: task10
   Definitions
      At line 23 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 5 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task10 used once
task10_end 00000018

Symbol: task10_end
   Definitions
      At line 35 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 29 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task10_end used once
task10_loop 00000004

Symbol: task10_loop
   Definitions
      At line 27 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 34 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task10_loop used once
task11 0000001A

Symbol: task11
   Definitions
      At line 42 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 6 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task11 used once
task11_end 00000032

Symbol: task11_end
   Definitions
      At line 52 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 46 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task11_end used once
task11_loop 0000001E

Symbol: task11_loop
   Definitions
      At line 44 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 51 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task11_loop used once
task12 00000034

Symbol: task12



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 56 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 7 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task12 used once
task12_end 00000058

Symbol: task12_end
   Definitions
      At line 73 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 64 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task12_end used once
task12_loop 0000003A

Symbol: task12_loop
   Definitions
      At line 62 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 72 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task12_loop used once
task13 0000005A

Symbol: task13
   Definitions
      At line 79 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 8 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task13 used once
task13_end 0000007C

Symbol: task13_end
   Definitions
      At line 99 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 88 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task13_end used once
task13_loop 00000064

Symbol: task13_loop
   Definitions
      At line 86 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 98 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task13_loop used once
task14 0000007E

Symbol: task14
   Definitions
      At line 104 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 9 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task14 used once
task14_end 000000A2

Symbol: task14_end
   Definitions
      At line 120 in file source\lab_load_n_store_asm_functions_prob.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 113 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task14_end used once
task14_loop 00000088

Symbol: task14_loop
   Definitions
      At line 111 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 119 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task14_loop used once
task15 000000A4

Symbol: task15
   Definitions
      At line 124 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 10 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task15 used once
task15_end 000000C6

Symbol: task15_end
   Definitions
      At line 144 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 134 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task15_end used once
task15_loop 000000AE

Symbol: task15_loop
   Definitions
      At line 132 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      At line 143 in file source\lab_load_n_store_asm_functions_prob.s
Comment: task15_loop used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

gPtrArray10a 00000000

Symbol: gPtrArray10a
   Definitions
      At line 12 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      None
Comment: gPtrArray10a unused
gPtrArray11a 00000000

Symbol: gPtrArray11a
   Definitions
      At line 13 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      None
Comment: gPtrArray11a unused
gPtrArray12a 00000000

Symbol: gPtrArray12a
   Definitions
      At line 14 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      None
Comment: gPtrArray12a unused
gPtrArray13a 00000000

Symbol: gPtrArray13a
   Definitions
      At line 15 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      None
Comment: gPtrArray13a unused
gPtrArray14a 00000000

Symbol: gPtrArray14a
   Definitions
      At line 16 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      None
Comment: gPtrArray14a unused
gPtrArray15a 00000000

Symbol: gPtrArray15a
   Definitions
      At line 17 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      None
Comment: gPtrArray15a unused
gVar1 00000000

Symbol: gVar1
   Definitions
      At line 18 in file source\lab_load_n_store_asm_functions_prob.s
   Uses
      None
Comment: gVar1 unused
7 symbols
361 symbols in table
