


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             my_fancy_asm_code, CODE, READON
LY 
                                                            ; Define the progra
                                                            m area
    2 00000000         
    3 00000000         ; Export functions defined in this file. These functions
                        need to be declared 
    4 00000000         ; in the file calling them.
    5 00000000                 EXPORT           task10
    6 00000000                 EXPORT           task11
    7 00000000                 EXPORT           task12
    8 00000000                 EXPORT           task13
    9 00000000                 EXPORT           task14
   10 00000000                 EXPORT           task15
   11 00000000         
   12 00000000                 IMPORT           gPtrArray10a
   13 00000000                 IMPORT           gPtrArray11a
   14 00000000                 IMPORT           gPtrArray12a
   15 00000000                 IMPORT           gPtrArray13a
   16 00000000                 IMPORT           gPtrArray14a
   17 00000000                 IMPORT           gPtrArray15a
   18 00000000                 IMPORT           gVar1
   19 00000000         
   20 00000000                 ALIGN                        ; Align the data in
                                                             the boundary of 4 
                                                            bytes. 
   21 00000000         
   22 00000000         task10  PROC
   23 00000000 4841            LDR              r0, =gPtrArray10a ; Loading the
                                                             address of the glo
                                                            bal variable gPtrAr
                                                            ray10a
   24 00000002 6800            LDR              r0, [r0]    ; Loading the conte
                                                            nt of the global va
                                                            riable gPtrArray10a
                                                            
   25 00000004 4941            LDR              r1, =gVar1  ; Loading the addre
                                                            ss of the global va
                                                            riable gVar1
   26 00000006 6809            LDR              r1, [r1]    ; Loading the conte
                                                            nt of the global va
                                                            riable gVar1
   27 00000008 F04F 0200       MOV              r2, #0      ; variable (int) i
   28 0000000C         task10_loop
   29 0000000C 428A            CMP              r2, r1      ; test = r2 - r1
   30 0000000E DA07            BGE              task10_end  ; if test >= 0, the
                                                            n branch to task10_
                                                            end    
   31 00000010 EA4F 0382       MOV              r3, r2, LSL #2 ; r3 <- r2 * 4
   32 00000014 F1A3 030F       SUB              r3, #15     ; r3 <- r3 - 15
   33 00000018 5483            STRB             r3, [r0, r2] ; r3 -> mem[r0 + r
                                                            2] or r3 -> mem[r0 
                                                            + i]
   34 0000001A F102 0201       ADD              r2, #1      ; r2 <- r2 + 1
   35 0000001E E7F5            B                task10_loop ; branch to task10_
                                                            loop
   36 00000020         task10_end
   37 00000020 4770            BX               lr          ; return
   38 00000022                 ENDP



ARM Macro Assembler    Page 2 


   39 00000022         
   40 00000022         ; If you need to use registers starting from r4, you nee
                       d to PUSH them first to save the 
   41 00000022         ; run-time environment for the caller. You need to POP t
                       hem up at the exit of the code.
   42 00000022         
   43 00000022         task11  PROC
   44 00000022 4839            LDR              r0, =gPtrArray10a
   45 00000024 6800            LDR              r0, [r0]
   46 00000026 4939            LDR              r1, =gVar1
   47 00000028 6809            LDR              r1, [r1]
   48 0000002A F04F 0200       MOV              r2, #0
   49 0000002E         task11_loop
   50 0000002E 428A            CMP              r2, r1      ; test = r2 - r1
   51 00000030 DA07            BGE              task11_end  ; if test >= 0, the
                                                            n branch to task10_
                                                            end    
   52 00000032 EA4F 1342       MOV              r3, r2, LSL #5 ; r3 <- r2 * 4
   53 00000036 F103 0302       ADD              r3, #2      ; r3 <- r3 - 15
   54 0000003A 5483            STRB             r3, [r0, r2] ; r3 -> mem[r0 + r
                                                            2] or r3 -> mem[r0 
                                                            + i]
   55 0000003C F102 0201       ADD              r2, #1      ; r2 <- r2 + 1
   56 00000040 E7F5            B                task11_loop ; branch to task10_
                                                            loop
   57 00000042         task11_end
   58 00000042 4770            BX               lr
   59 00000044                 ENDP
   60 00000044         
   61 00000044         task12  PROC
   62 00000044 B530            PUSH             {r4-r5, lr}
   63 00000046 4830            LDR              r0, =gPtrArray10a
   64 00000048 6800            LDR              r0, [r0]
   65 0000004A 4C31            LDR              r4, =gPtrArray12a
   66 0000004C 6824            LDR              r4, [r4]
   67 0000004E 492F            LDR              r1, =gVar1
   68 00000050 6809            LDR              r1, [r1]
   69 00000052 F04F 0200       MOV              r2, #0
   70 00000056         task12_loop
   71 00000056 428A            CMP              r2, r1
   72 00000058 DA0C            BGE              task12_end
   73 0000005A 5683            LDRSB            r3, [r0, r2]
   74 0000005C F04F 050A       LDR              r5, =10
   75 00000060 EBA5 0503       SUB              r5, r3
   76 00000064 F824 5012       STRH             r5, [r4, r2, LSL #1]
   77 00000068 F103 0301       ADD              r3, #1
   78 0000006C 5483            STRB             r3, [r0, r2]
   79 0000006E F102 0201       ADD              r2, #1
   80 00000072 E7F0            B                task12_loop
   81 00000074         task12_end
   82 00000074 BD30            POP              {r4-r5, pc} ; Pop lr to pc, whi
                                                            ch is the same as B
                                                            X lr.
   83 00000076                 ENDP
   84 00000076         
   85 00000076         task13  PROC
   86 00000076 B530            PUSH             {r4-r5, lr}
   87 00000078 4826            LDR              r0, =gPtrArray11a
   88 0000007A 6800            LDR              r0, [r0]



ARM Macro Assembler    Page 3 


   89 0000007C 4926            LDR              r1, =gPtrArray13a
   90 0000007E 6809            LDR              r1, [r1]
   91 00000080 4A22            LDR              r2, =gVar1
   92 00000082 6812            LDR              r2, [r2]
   93 00000084 F1A2 0201       SUB              r2, #1
   94 00000088 F04F 0300       MOV              r3, #0
   95 0000008C         task13_loop
   96 0000008C 4293            CMP              r3, r2
   97 0000008E DA09            BGE              task13_end
   98 00000090         
   99 00000090 7804            LDRB             r4, [r0]    ; load gPtr11a
  100 00000092 7845            LDRB             r5, [r0, #1] ; load gPtr11a + 1
                                                            
  101 00000094 4425            ADD              r5, r4      ; compute addition
  102 00000096         
  103 00000096 F821 5013       STRH             r5, [r1, r3, LSL #1]
  104 0000009A         
  105 0000009A F103 0301       ADD              r3, #1      ; increment i
  106 0000009E F100 0001       ADD              r0, #1      ; increment gPtr11a
                                                            
  107 000000A2 E7F3            B                task13_loop
  108 000000A4         task13_end
  109 000000A4 BD30            POP              {r4-r5, pc}
  110 000000A6                 ENDP
  111 000000A6         
  112 000000A6         task14  PROC
  113 000000A6 B530            PUSH             {r4-r5, lr}
  114 000000A8 4819            LDR              r0, =gPtrArray12a
  115 000000AA 6800            LDR              r0, [r0]
  116 000000AC 4C1B            LDR              r4, =gPtrArray14a
  117 000000AE 6824            LDR              r4, [r4]
  118 000000B0 4916            LDR              r1, =gVar1
  119 000000B2 6809            LDR              r1, [r1]
  120 000000B4 F1A1 0101       SUB              r1, #1
  121 000000B8 F04F 0200       MOV              r2, #0
  122 000000BC         task14_loop
  123 000000BC 428A            CMP              r2, r1
  124 000000BE DA0A            BGE              task14_end
  125 000000C0 F9B0 3000       LDRSH            r3, [r0]
  126 000000C4 F930 5F02       LDRSH            r5, [r0, #2]!
  127 000000C8 EB03 03C5       ADD              r3, r5, LSL #3
  128 000000CC F844 3022       STR              r3, [r4, r2, LSL #2]
  129 000000D0 F102 0201       ADD              r2, #1
  130 000000D4 E7F2            B                task14_loop
  131 000000D6         task14_end
  132 000000D6 BD30            POP              {r4-r5, pc}
  133 000000D8                 ENDP
  134 000000D8         
  135 000000D8         task15  PROC
  136 000000D8 B530            PUSH             {r4-r5, lr}
  137 000000DA 480F            LDR              r0, =gPtrArray13a
  138 000000DC 6800            LDR              r0, [r0]
  139 000000DE 4910            LDR              r1, =gPtrArray15a
  140 000000E0 6809            LDR              r1, [r1]
  141 000000E2 4A0A            LDR              r2, =gVar1
  142 000000E4 6812            LDR              r2, [r2]
  143 000000E6 F1A2 0201       SUB              r2, #1
  144 000000EA F04F 0300       MOV              r3, #0      ; i = 0
  145 000000EE         task15_loop



ARM Macro Assembler    Page 4 


  146 000000EE 4293            CMP              r3, r2
  147 000000F0 DA09            BGE              task15_end
  148 000000F2 F830 4B02       LDRH             r4, [r0], #2 ; load gPtr13a to 
                                                            temp
  149 000000F6 8805            LDRH             r5, [r0]    ; load gPtr11a + 1
  150 000000F8 EB04 1505       ADD              r5, r4, r5, LSL # 4 ; = temp + 
                                                            16 * (*gPtr13a)
  151 000000FC F821 5023       STRH             r5, [r1, r3, LSL #2]
  152 00000100 F103 0301       ADD              r3, #1      ; increment i
  153 00000104 E7F3            B                task15_loop
  154 00000106         task15_end
  155 00000106 BD30            POP              {r4-r5, pc}
  156 00000108                 ENDP
  157 00000108                 END
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --apcs=
interwork --depend=.\objects\ws--load_n_store_asm_functions_prob.d -o.\objects\
ws--load_n_store_asm_functions_prob.o -I.\RTE\_Target_sim -IC:\Users\illus\AppD
ata\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\illus\AppData
\Local\Arm\Packs\ARM\CMSIS\5.8.0\Device\ARM\ARMCM4\Include --predefine="__EVAL 
SETA 1" --predefine="__UVISION_VERSION SETA 535" --predefine="_RTE_ SETA 1" --p
redefine="ARMCM4_FP SETA 1" --predefine="_RTE_ SETA 1" --list=.\listings\ws--lo
ad_n_store_asm_functions_prob.lst source\ws--load_n_store_asm_functions_prob.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

my_fancy_asm_code 00000000

Symbol: my_fancy_asm_code
   Definitions
      At line 1 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      None
Comment: my_fancy_asm_code unused
task10 00000000

Symbol: task10
   Definitions
      At line 22 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 5 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task10 used once
task10_end 00000020

Symbol: task10_end
   Definitions
      At line 36 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 30 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task10_end used once
task10_loop 0000000C

Symbol: task10_loop
   Definitions
      At line 28 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 35 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task10_loop used once
task11 00000022

Symbol: task11
   Definitions
      At line 43 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 6 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task11 used once
task11_end 00000042

Symbol: task11_end
   Definitions
      At line 57 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 51 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task11_end used once
task11_loop 0000002E

Symbol: task11_loop
   Definitions
      At line 49 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 56 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task11_loop used once
task12 00000044

Symbol: task12



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 61 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 7 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task12 used once
task12_end 00000074

Symbol: task12_end
   Definitions
      At line 81 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 72 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task12_end used once
task12_loop 00000056

Symbol: task12_loop
   Definitions
      At line 70 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 80 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task12_loop used once
task13 00000076

Symbol: task13
   Definitions
      At line 85 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 8 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task13 used once
task13_end 000000A4

Symbol: task13_end
   Definitions
      At line 108 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 97 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task13_end used once
task13_loop 0000008C

Symbol: task13_loop
   Definitions
      At line 95 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 107 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task13_loop used once
task14 000000A6

Symbol: task14
   Definitions
      At line 112 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 9 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task14 used once
task14_end 000000D6

Symbol: task14_end
   Definitions
      At line 131 in file source\ws--load_n_store_asm_functions_prob.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 124 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task14_end used once
task14_loop 000000BC

Symbol: task14_loop
   Definitions
      At line 122 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 130 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task14_loop used once
task15 000000D8

Symbol: task15
   Definitions
      At line 135 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 10 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task15 used once
task15_end 00000106

Symbol: task15_end
   Definitions
      At line 154 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 147 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task15_end used once
task15_loop 000000EE

Symbol: task15_loop
   Definitions
      At line 145 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 153 in file source\ws--load_n_store_asm_functions_prob.s
Comment: task15_loop used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

gPtrArray10a 00000000

Symbol: gPtrArray10a
   Definitions
      At line 12 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 23 in file source\ws--load_n_store_asm_functions_prob.s
      At line 44 in file source\ws--load_n_store_asm_functions_prob.s
      At line 63 in file source\ws--load_n_store_asm_functions_prob.s

gPtrArray11a 00000000

Symbol: gPtrArray11a
   Definitions
      At line 13 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 87 in file source\ws--load_n_store_asm_functions_prob.s
Comment: gPtrArray11a used once
gPtrArray12a 00000000

Symbol: gPtrArray12a
   Definitions
      At line 14 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 65 in file source\ws--load_n_store_asm_functions_prob.s
      At line 114 in file source\ws--load_n_store_asm_functions_prob.s

gPtrArray13a 00000000

Symbol: gPtrArray13a
   Definitions
      At line 15 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 89 in file source\ws--load_n_store_asm_functions_prob.s
      At line 137 in file source\ws--load_n_store_asm_functions_prob.s

gPtrArray14a 00000000

Symbol: gPtrArray14a
   Definitions
      At line 16 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 116 in file source\ws--load_n_store_asm_functions_prob.s
Comment: gPtrArray14a used once
gPtrArray15a 00000000

Symbol: gPtrArray15a
   Definitions
      At line 17 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 139 in file source\ws--load_n_store_asm_functions_prob.s
Comment: gPtrArray15a used once
gVar1 00000000

Symbol: gVar1
   Definitions
      At line 18 in file source\ws--load_n_store_asm_functions_prob.s
   Uses
      At line 25 in file source\ws--load_n_store_asm_functions_prob.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

      At line 46 in file source\ws--load_n_store_asm_functions_prob.s
      At line 67 in file source\ws--load_n_store_asm_functions_prob.s
      At line 91 in file source\ws--load_n_store_asm_functions_prob.s
      At line 118 in file source\ws--load_n_store_asm_functions_prob.s
      At line 141 in file source\ws--load_n_store_asm_functions_prob.s

7 symbols
363 symbols in table
